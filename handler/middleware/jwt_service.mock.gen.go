// Code generated by MockGen. DO NOT EDIT.
// Source: jwt_service.go

// Package middleware is a generated GoMock package.
package middleware

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIJwtService is a mock of IJwtService interface.
type MockIJwtService struct {
	ctrl     *gomock.Controller
	recorder *MockIJwtServiceMockRecorder
}

// MockIJwtServiceMockRecorder is the mock recorder for MockIJwtService.
type MockIJwtServiceMockRecorder struct {
	mock *MockIJwtService
}

// NewMockIJwtService creates a new mock instance.
func NewMockIJwtService(ctrl *gomock.Controller) *MockIJwtService {
	mock := &MockIJwtService{ctrl: ctrl}
	mock.recorder = &MockIJwtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwtService) EXPECT() *MockIJwtServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIJwtService) Auth(r *http.Request) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", r)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockIJwtServiceMockRecorder) Auth(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIJwtService)(nil).Auth), r)
}

// GenerateToken mocks base method.
func (m *MockIJwtService) GenerateToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIJwtServiceMockRecorder) GenerateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIJwtService)(nil).GenerateToken), userID)
}
